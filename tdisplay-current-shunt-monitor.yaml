#The custom outputs are designed to work with Home Assistants energy system inputs.. 
#You will definitely want to rename the sensors + customize the shunt values but this gives you an idea.. 
#My voltage comes from the 2:1 voltage divider so the power outputs get multiplied by 2 as well and are scaled to kW as I prefer that to Watts for ease of reading at these power levesl

i2c:
  sda: 21
  scl: 22
  scan: true
  id: bus_a
  
sensor:
  - platform: ina226
    address: 0x40
    shunt_resistance: 0.0001 ohm
    #for 1000A 100MV shunt
    bus_voltage:
      name: "Battery Voltage"
      id: shunt_0_voltage
      accuracy_decimals: 2
      filters:
      - multiply: 2
    current:
      name: "Inverter Current"
      accuracy_decimals: 1
    power:
      name: "Inverter Power"
      id: shunt_0_watts
      accuracy_decimals: 2
      unit_of_measurement: "kW"
      filters:
      - multiply: .002
    max_current: 1000A
    update_interval: 1s
    
  - platform: ina226
    address: 0x41
    shunt_resistance: 0.0001 ohm
    #shunt_resistance: 0.0001 ohm # for 500A 50MV shunt
    current:
      name: "Solar Current"
      accuracy_decimals: 1
    power:
      name: "Solar Power"
      id: shunt_1_watts
      accuracy_decimals: 2
      unit_of_measurement: "kW"
      filters:
      - multiply: .002
      - lambda: !lambda |-
         if (x <= .01) {
          return 0;
         }
         else {
         return x;
         }
    max_current: 500A
    update_interval: 1s
    
  - platform: ina226
    address: 0x42
    shunt_resistance: 0.00025 ohm
    #shunt_resistance: 0.00025 ohm # for 200A 50MV shunt
    current:
      name: "Generator Current"
      accuracy_decimals: 1
    power:
      name: "Generator Power"
      id: shunt_2_watts
      accuracy_decimals: 2
      unit_of_measurement: "kW"
      filters:
      - multiply: .002
      - lambda: !lambda |-
         if (x <= .01) {
          return 0;
         }
         else {
         return x;
         }
    max_current: 200A
    update_interval: 1s
    
  - platform: ina226
    address: 0x43
    shunt_resistance: 0.0001 ohm
    #shunt_resistance: 0.0001 ohm # for 500A 50MV shunt
    current:
      name: "Hydro Current"
      accuracy_decimals: 1
      filters:
      - lambda: !lambda |-
         if (x <= .01) {
          return 0;
         }
         else {
         return x;
         }
    power:
      name: "Hydro Power"
      id: shunt_3_watts
      accuracy_decimals: 2
      unit_of_measurement: "kW"
      filters:
      - multiply: .002
      - lambda: !lambda |-
         if (x <= .01) {
          return 0;
         }
         else {
         return x;
         }
    max_current: 500A
    update_interval: 1s
    
    
  - platform: ina226
    address: 0x44
    shunt_resistance: 0.00025 ohm
    #shunt_resistance: 0.00025 ohm # for 200A 50MV shunt
    current:
      name: "Dump Load Current"
      accuracy_decimals: 1
    power:
      name: "Dump Load Power"
      id: shunt_4_watts
      accuracy_decimals: 2
      unit_of_measurement: "kW"
      filters:
      - multiply: .002
      - lambda: !lambda |-
         if (x <= .01) {
          return 0;
         }
         else {
         return x;
         }
    max_current: 200A
    update_interval: 1s
    
  - platform: template
    name: "Battery Net Power"
    id: battery_net_power
    lambda: |-
      return (-id(shunt_0_watts).state + id(shunt_1_watts).state + id(shunt_2_watts).state + id(shunt_3_watts).state + (-id(shunt_4_watts).state));
    update_interval: 1s
    unit_of_measurement: "kW"
    icon: mdi:flash
    device_class: "power"
    state_class: "measurement"
    
  - platform: template
    name: "Battery In Power"
    lambda: !lambda |-
      if (id(battery_net_power).state > 0) {
        return (id(battery_net_power).state);
      }
      else {
        return 0;
      }
    update_interval: 1s
    unit_of_measurement: "kW"
    icon: mdi:flash
    device_class: "power"
    state_class: "measurement"
    
  - platform: template
    name: "Battery Out Power"
    lambda: !lambda |-
      if (id(battery_net_power).state < 0) {
        return (-id(battery_net_power).state);
      }
      else {
        return 0;
      }
    update_interval: 1s
    unit_of_measurement: "kW"
    icon: mdi:flash
    device_class: "power"
    state_class: "measurement"
    
    
    
color:
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%
  - id: my_orange
    red: 100%
    green: 50%
    blue: 0%
  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_blue
    red: 0%
    green: 0%
    blue: 100%
  - id: my_teal
    red: 0%
    green: 100%
    blue: 100%
  - id: my_gray
    red: 50%
    green: 50%
    blue: 50%

font:
  - file: "gfonts://Helvetica"
    id: helvetica_48
    size: 48
  - file: "gfonts://Helvetica"
    id: helvetica_36
    size: 36
  - file: "gfonts://Helvetica"
    id: helvetica_24
    size: 24
  - file: "gfonts://Helvetica"
    id: helvetica_12
    size: 12

binary_sensor:
  - platform: status
    name: "Node Status"
    id: system_status

time:
  - platform: homeassistant
    id: esptime
    
spi:
  clk_pin: GPIO18
  mosi_pin: GPIO19

display:
  - platform: st7789v
    model: TTGO TDisplay 135x240
    update_interval: 1s
    backlight_pin: GPIO4
    cs_pin: GPIO5
    dc_pin: GPIO16
    reset_pin: GPIO23
    rotation: 0
    lambda: |-
      it.rectangle(0,  0, it.get_width(), it.get_height(), id(my_blue));
      it.rectangle(0, 20, it.get_width(), it.get_height(), id(my_blue));   // header bar
      
      //it.print(5, 5, id(helvetica_12), id(my_yellow), TextAlign::TOP_LEFT, "ESPHome");
      it.strftime(5, 5, id(helvetica_12), id(my_yellow), TextAlign::TOP_LEFT, "%H:%M:%S", id(esptime).now());

      if (id(system_status).state) {
        it.print(135, 5, id(helvetica_12), id(my_green), TextAlign::TOP_RIGHT, "Online");
      }
      else {
        it.print(135, 5, id(helvetica_12), id(my_red), TextAlign::TOP_RIGHT, "Offline");
      }
      
      it.print((140 / 2), (240 / 6.5) * 1 - 8, id(helvetica_12), id(my_yellow), TextAlign::CENTER, "Battery Voltage");
      it.printf((140 / 2), (240 / 6.5) * 1 + 9, id(helvetica_24), id(my_yellow), TextAlign::CENTER, "%.2fV", id(shunt_0_voltage).state);
      it.line(0, (240 / 6.5) * 1 + 18, 140, (240 / 6.5) * 1 + 18, id(my_blue));
    
      it.print((140 / 2), (240 / 6.5) * 2 - 8, id(helvetica_12), id(my_green), TextAlign::CENTER, "Inverter Power");
      it.printf((140 / 2), (240 / 6.5) * 2 + 9, id(helvetica_24), id(my_green), TextAlign::CENTER, "%.2fkW", id(shunt_0_watts).state);
      it.line(0, (240 / 6.5) * 2 + 18, 140, (240 / 6.5) * 2 + 18, id(my_blue));
      
      it.print((140 / 2), (240 / 6.5) * 3 - 8, id(helvetica_12), id(my_orange), TextAlign::CENTER, "Solar Power");
      it.printf((140 / 2), (240 / 6.5) * 3 + 9, id(helvetica_24), id(my_orange), TextAlign::CENTER, "%.2fkW", id(shunt_1_watts).state);
      it.line(0, (240 / 6.5) * 3 + 18, 140, (240 / 6.5) * 3 + 18, id(my_blue));
      
      it.print((140 / 2), (240 / 6.5) * 4 - 8, id(helvetica_12), id(my_gray), TextAlign::CENTER, "Generator Power");
      it.printf((140 / 2), (240 / 6.5) * 4 + 9, id(helvetica_24), id(my_gray), TextAlign::CENTER, "%.2fkW", id(shunt_2_watts).state);
      it.line(0, (240 / 6.5) * 4 + 18, 140, (240 / 6.5) * 4 + 18, id(my_blue));
      
      it.print((140 / 2), (240 / 6.5) * 5 - 8, id(helvetica_12), id(my_teal), TextAlign::CENTER, "Hydro Power");
      it.printf((140 / 2), (240 / 6.5) * 5 + 9, id(helvetica_24), id(my_teal), TextAlign::CENTER, "%.2fkW", id(shunt_3_watts).state);
      it.line(0, (240 / 6.5) * 5 + 18, 140, (240 / 6.5) * 5 + 18, id(my_blue));
      
      it.print((140 / 2), (240 / 6.5) * 6 - 8, id(helvetica_12), id(my_red), TextAlign::CENTER, "Dump Load Power");
      it.printf((140 / 2), (240 / 6.5) * 6 + 9, id(helvetica_24), id(my_red), TextAlign::CENTER, "%.2fkW", id(shunt_4_watts).state);

      
