substitutions:
  devicename: "ESP32-2432S028"

spi:
  clk_pin: GPIO14
  mosi_pin: GPIO13
  miso_pin: GPIO12
  
color:
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%
  - id: my_orange
    red: 100%
    green: 50%
    blue: 0%
  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_blue
    red: 0%
    green: 0%
    blue: 100%
  - id: my_teal
    red: 0%
    green: 100%
    blue: 100%
  - id: my_gray
    red: 70%
    green: 70%
    blue: 70%
  - id: my_white
    red: 100%
    green: 100%
    blue: 100%

font:
  - file: "gfonts://Roboto"
    id: Roboto_48
    size: 48
  - file: "gfonts://Roboto"
    id: Roboto_36
    size: 36
  - file: "gfonts://Roboto"
    id: Roboto_24
    size: 24
  - file: "gfonts://Roboto"
    id: Roboto_12
    size: 12

binary_sensor:
  - platform: status
    name: "Node Status"
    id: system_status

time:
  - platform: homeassistant
    id: esptime

text_sensor:
  - platform: template
    # name: Uptime Human Readable
    id: uptime_human
    icon: mdi:clock-start
    internal: True

  - platform: wifi_info
    ip_address:
      # name: ESP IP Address
      id: ip_address

sensor:
  - platform: uptime
    # name: Uptime Sensor
    internal: True
    id: uptime_sensor
    update_interval: 1s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                ("Uptime ") +
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();

  - platform: wifi_signal
    # name: "WiFi Signal Sensor"
    internal: True
    id: wifi_signal_sensor
    update_interval: 5s

  - platform: homeassistant
    name: "Processor Use"
    entity_id: sensor.processor_use
    id: ha_processor_use    

display:
  - platform: ili9341
    model: TFT 2.4
    cs_pin: 15
    dc_pin: 2
    led_pin: 21
    lambda: |-
      int hs = it.get_width() / 2; // Horizontal Spacing = text data horizontal center point
      int hq = it.get_width() / 4; // text data horizontal center for two vertical lines
      int vs = it.get_height() / 8; // Vertical Center = text data vertical center point = how many lines
      int line_gap = 21; // distance of line from center of data text

      it.rectangle(0,  0, it.get_width(), it.get_height(), id(my_blue));
      it.rectangle(0, 20, it.get_width(), it.get_height(), id(my_blue));
      
      it.strftime(5, 5, id(Roboto_12), id(my_white), TextAlign::TOP_LEFT, "%H:%M:%S", id(esptime).now());

      it.print(hs, 5, id(Roboto_12), id(my_blue), TextAlign::TOP_CENTER, "${devicename}"); //print title  
      
      if (id(system_status).state) {
        it.print(it.get_width()-5, 5, id(Roboto_12), id(my_green), TextAlign::TOP_RIGHT, "HA Connected");
      }
      else {
        it.print(it.get_width()-5, 5, id(Roboto_12), id(my_red), TextAlign::TOP_RIGHT, "HA Offline");
      }

      it.line(0, it.get_height()-20, it.get_width(), it.get_height()-20, id(my_blue)); // line across bottom above footer text

      it.printf(5, it.get_height()-3, id(Roboto_12), id(my_gray), TextAlign::BOTTOM_LEFT, "%s", id(uptime_human).state.c_str());
      it.printf(hs, it.get_height()-3, id(Roboto_12), id(my_gray), TextAlign::BOTTOM_CENTER, "%.0fdBm", id(wifi_signal_sensor).state);
      it.printf(it.get_width()-5, it.get_height()-3, id(Roboto_12), id(my_gray), TextAlign::BOTTOM_RIGHT, "%s", id(ip_address).state.c_str());

      it.print(hs, vs * 1 - 8, id(Roboto_12), id(my_yellow), TextAlign::CENTER, "Data line 1");
      it.printf(hs, vs * 1 + 9, id(Roboto_24), id(my_yellow), TextAlign::CENTER, "%.0fdBm", id(wifi_signal_sensor).state);
      it.line(0, vs * 1 + line_gap, it.get_width(), vs * 1 + line_gap, id(my_blue));
      
      it.print(hs, vs * 2 - 8, id(Roboto_12), id(my_green), TextAlign::CENTER, "Data line 2");
      it.printf(hs, vs * 2 + 9, id(Roboto_24), id(my_green), TextAlign::CENTER, "%.0fdBm", id(wifi_signal_sensor).state);
      it.line(0, vs * 2 + line_gap, it.get_width(), vs * 2 + line_gap, id(my_blue));
    
      it.print(hs, vs * 3 - 8, id(Roboto_12), id(my_red), TextAlign::CENTER, "Data line 3");
      it.printf(hs, vs * 3 + 9, id(Roboto_24), id(my_red), TextAlign::CENTER, "%.0fdBm", id(wifi_signal_sensor).state);
      it.line(0, vs * 3 + line_gap, it.get_width(), vs * 3 + line_gap, id(my_blue));

      it.print(hs, vs * 4 - 8, id(Roboto_12), id(my_white), TextAlign::CENTER, "Data line 4");
      it.printf(hs, vs * 4 + 9, id(Roboto_24), id(my_white), TextAlign::CENTER, "%.0fdBm", id(wifi_signal_sensor).state);
      it.line(0, vs * 4 + line_gap, it.get_width(), vs * 4 + line_gap, id(my_blue));

      it.print(hs, vs * 5 - 8, id(Roboto_12), id(my_white), TextAlign::CENTER, "Data line 5");
      it.printf(hs, vs * 5 + 9, id(Roboto_24), id(my_white), TextAlign::CENTER, "%.0fdBm", id(wifi_signal_sensor).state);
      it.line(0, vs * 5 + line_gap, it.get_width(), vs * 5 + line_gap, id(my_blue));

      it.print(hs, vs * 6 - 8, id(Roboto_12), id(my_white), TextAlign::CENTER, "Data line 6");
      it.printf(hs, vs * 6 + 9, id(Roboto_24), id(my_white), TextAlign::CENTER, "%.0fdBm", id(wifi_signal_sensor).state);
      it.line(0, vs * 6 + line_gap, it.get_width(), vs * 6 + line_gap, id(my_blue));
    
      it.print(hs, vs * 7 - 8, id(Roboto_12), id(my_white), TextAlign::CENTER, "Data line 7");
      it.printf(hs, vs * 7 + 9, id(Roboto_24), id(my_white), TextAlign::CENTER, "%.0fdBm", id(wifi_signal_sensor).state);
